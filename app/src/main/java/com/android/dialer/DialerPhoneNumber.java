// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/android/dialer/phonenumberproto/dialer_phone_number.proto

package com.android.dialer;

/**
 * <pre>
 * A phone number for use in the dialer application. It consists of a
 * DialerInternalPhoneNumber, which is a copy of libphonenumber's PhoneNumber
 * proto, and the raw input used to create it.
 * </pre>
 *
 * Protobuf type {@code com.android.dialer.DialerPhoneNumber}
 */
public  final class DialerPhoneNumber extends
    com.google.protobuf.GeneratedMessageLite<
        DialerPhoneNumber, DialerPhoneNumber.Builder> implements
    // @@protoc_insertion_point(message_implements:com.android.dialer.DialerPhoneNumber)
    DialerPhoneNumberOrBuilder {
  private DialerPhoneNumber() {
  }
  public interface RawInputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.dialer.DialerPhoneNumber.RawInput)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The phone number as it was entered or received.
     * </pre>
     *
     * <code>optional string number = 1;</code>
     */
    boolean hasNumber();
    /**
     * <pre>
     * The phone number as it was entered or received.
     * </pre>
     *
     * <code>optional string number = 1;</code>
     */
    String getNumber();
    /**
     * <pre>
     * The phone number as it was entered or received.
     * </pre>
     *
     * <code>optional string number = 1;</code>
     */
    com.google.protobuf.ByteString
        getNumberBytes();

    /**
     * <pre>
     * The ISO 3166-1 two letter country code of the country where the user made
     * or received the call.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    boolean hasCountryIso();
    /**
     * <pre>
     * The ISO 3166-1 two letter country code of the country where the user made
     * or received the call.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    String getCountryIso();
    /**
     * <pre>
     * The ISO 3166-1 two letter country code of the country where the user made
     * or received the call.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    com.google.protobuf.ByteString
        getCountryIsoBytes();
  }
  /**
   * <pre>
   * The raw input which was used to create a DialerPhoneNumber.
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.DialerPhoneNumber.RawInput}
   */
  public  static final class RawInput extends
      com.google.protobuf.GeneratedMessageLite<
          RawInput, RawInput.Builder> implements
      // @@protoc_insertion_point(message_implements:com.android.dialer.DialerPhoneNumber.RawInput)
      RawInputOrBuilder {
    private RawInput() {
      number_ = "";
      countryIso_ = "";
    }
    private int bitField0_;
    public static final int NUMBER_FIELD_NUMBER = 1;
    private String number_;
    /**
     * <pre>
     * The phone number as it was entered or received.
     * </pre>
     *
     * <code>optional string number = 1;</code>
     */
    public boolean hasNumber() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The phone number as it was entered or received.
     * </pre>
     *
     * <code>optional string number = 1;</code>
     */
    public String getNumber() {
      return number_;
    }
    /**
     * <pre>
     * The phone number as it was entered or received.
     * </pre>
     *
     * <code>optional string number = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNumberBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(number_);
    }
    /**
     * <pre>
     * The phone number as it was entered or received.
     * </pre>
     *
     * <code>optional string number = 1;</code>
     */
    private void setNumber(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      number_ = value;
    }
    /**
     * <pre>
     * The phone number as it was entered or received.
     * </pre>
     *
     * <code>optional string number = 1;</code>
     */
    private void clearNumber() {
      bitField0_ = (bitField0_ & ~0x00000001);
      number_ = getDefaultInstance().getNumber();
    }
    /**
     * <pre>
     * The phone number as it was entered or received.
     * </pre>
     *
     * <code>optional string number = 1;</code>
     */
    private void setNumberBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      number_ = value.toStringUtf8();
    }

    public static final int COUNTRY_ISO_FIELD_NUMBER = 2;
    private String countryIso_;
    /**
     * <pre>
     * The ISO 3166-1 two letter country code of the country where the user made
     * or received the call.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public boolean hasCountryIso() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The ISO 3166-1 two letter country code of the country where the user made
     * or received the call.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public String getCountryIso() {
      return countryIso_;
    }
    /**
     * <pre>
     * The ISO 3166-1 two letter country code of the country where the user made
     * or received the call.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCountryIsoBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(countryIso_);
    }
    /**
     * <pre>
     * The ISO 3166-1 two letter country code of the country where the user made
     * or received the call.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    private void setCountryIso(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      countryIso_ = value;
    }
    /**
     * <pre>
     * The ISO 3166-1 two letter country code of the country where the user made
     * or received the call.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    private void clearCountryIso() {
      bitField0_ = (bitField0_ & ~0x00000002);
      countryIso_ = getDefaultInstance().getCountryIso();
    }
    /**
     * <pre>
     * The ISO 3166-1 two letter country code of the country where the user made
     * or received the call.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    private void setCountryIsoBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      countryIso_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeString(1, getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeString(2, getCountryIso());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getCountryIso());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static RawInput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static RawInput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static RawInput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static RawInput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static RawInput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static RawInput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static RawInput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static RawInput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static RawInput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static RawInput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(RawInput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The raw input which was used to create a DialerPhoneNumber.
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.DialerPhoneNumber.RawInput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          RawInput, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.dialer.DialerPhoneNumber.RawInput)
        RawInputOrBuilder {
      // Construct using com.android.dialer.DialerPhoneNumber.RawInput.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The phone number as it was entered or received.
       * </pre>
       *
       * <code>optional string number = 1;</code>
       */
      public boolean hasNumber() {
        return instance.hasNumber();
      }
      /**
       * <pre>
       * The phone number as it was entered or received.
       * </pre>
       *
       * <code>optional string number = 1;</code>
       */
      public String getNumber() {
        return instance.getNumber();
      }
      /**
       * <pre>
       * The phone number as it was entered or received.
       * </pre>
       *
       * <code>optional string number = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNumberBytes() {
        return instance.getNumberBytes();
      }
      /**
       * <pre>
       * The phone number as it was entered or received.
       * </pre>
       *
       * <code>optional string number = 1;</code>
       */
      public Builder setNumber(
          String value) {
        copyOnWrite();
        instance.setNumber(value);
        return this;
      }
      /**
       * <pre>
       * The phone number as it was entered or received.
       * </pre>
       *
       * <code>optional string number = 1;</code>
       */
      public Builder clearNumber() {
        copyOnWrite();
        instance.clearNumber();
        return this;
      }
      /**
       * <pre>
       * The phone number as it was entered or received.
       * </pre>
       *
       * <code>optional string number = 1;</code>
       */
      public Builder setNumberBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNumberBytes(value);
        return this;
      }

      /**
       * <pre>
       * The ISO 3166-1 two letter country code of the country where the user made
       * or received the call.
       * </pre>
       *
       * <code>optional string country_iso = 2;</code>
       */
      public boolean hasCountryIso() {
        return instance.hasCountryIso();
      }
      /**
       * <pre>
       * The ISO 3166-1 two letter country code of the country where the user made
       * or received the call.
       * </pre>
       *
       * <code>optional string country_iso = 2;</code>
       */
      public String getCountryIso() {
        return instance.getCountryIso();
      }
      /**
       * <pre>
       * The ISO 3166-1 two letter country code of the country where the user made
       * or received the call.
       * </pre>
       *
       * <code>optional string country_iso = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCountryIsoBytes() {
        return instance.getCountryIsoBytes();
      }
      /**
       * <pre>
       * The ISO 3166-1 two letter country code of the country where the user made
       * or received the call.
       * </pre>
       *
       * <code>optional string country_iso = 2;</code>
       */
      public Builder setCountryIso(
          String value) {
        copyOnWrite();
        instance.setCountryIso(value);
        return this;
      }
      /**
       * <pre>
       * The ISO 3166-1 two letter country code of the country where the user made
       * or received the call.
       * </pre>
       *
       * <code>optional string country_iso = 2;</code>
       */
      public Builder clearCountryIso() {
        copyOnWrite();
        instance.clearCountryIso();
        return this;
      }
      /**
       * <pre>
       * The ISO 3166-1 two letter country code of the country where the user made
       * or received the call.
       * </pre>
       *
       * <code>optional string country_iso = 2;</code>
       */
      public Builder setCountryIsoBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCountryIsoBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.dialer.DialerPhoneNumber.RawInput)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new RawInput();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          RawInput other = (RawInput) arg1;
          number_ = visitor.visitString(
              hasNumber(), number_,
              other.hasNumber(), other.number_);
          countryIso_ = visitor.visitString(
              hasCountryIso(), countryIso_,
              other.hasCountryIso(), other.countryIso_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readString();
                  bitField0_ |= 0x00000001;
                  number_ = s;
                  break;
                }
                case 18: {
                  String s = input.readString();
                  bitField0_ |= 0x00000002;
                  countryIso_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (RawInput.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.android.dialer.DialerPhoneNumber.RawInput)
    private static final RawInput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RawInput();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static RawInput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<RawInput> PARSER;

    public static com.google.protobuf.Parser<RawInput> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int DIALER_INTERNAL_PHONE_NUMBER_FIELD_NUMBER = 1;
  private com.android.dialer.DialerInternalPhoneNumber dialerInternalPhoneNumber_;
  /**
   * <pre>
   * libphonenumber representation of the phone number. May be empty if the raw
   * input failed to parse, in which case raw_input should be used.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
   */
  public boolean hasDialerInternalPhoneNumber() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * libphonenumber representation of the phone number. May be empty if the raw
   * input failed to parse, in which case raw_input should be used.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
   */
  public com.android.dialer.DialerInternalPhoneNumber getDialerInternalPhoneNumber() {
    return dialerInternalPhoneNumber_ == null ? com.android.dialer.DialerInternalPhoneNumber.getDefaultInstance() : dialerInternalPhoneNumber_;
  }
  /**
   * <pre>
   * libphonenumber representation of the phone number. May be empty if the raw
   * input failed to parse, in which case raw_input should be used.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
   */
  private void setDialerInternalPhoneNumber(com.android.dialer.DialerInternalPhoneNumber value) {
    if (value == null) {
      throw new NullPointerException();
    }
    dialerInternalPhoneNumber_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * libphonenumber representation of the phone number. May be empty if the raw
   * input failed to parse, in which case raw_input should be used.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
   */
  private void setDialerInternalPhoneNumber(
      com.android.dialer.DialerInternalPhoneNumber.Builder builderForValue) {
    dialerInternalPhoneNumber_ = builderForValue.build();
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * libphonenumber representation of the phone number. May be empty if the raw
   * input failed to parse, in which case raw_input should be used.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
   */
  private void mergeDialerInternalPhoneNumber(com.android.dialer.DialerInternalPhoneNumber value) {
    if (dialerInternalPhoneNumber_ != null &&
        dialerInternalPhoneNumber_ != com.android.dialer.DialerInternalPhoneNumber.getDefaultInstance()) {
      dialerInternalPhoneNumber_ =
        com.android.dialer.DialerInternalPhoneNumber.newBuilder(dialerInternalPhoneNumber_).mergeFrom(value).buildPartial();
    } else {
      dialerInternalPhoneNumber_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * libphonenumber representation of the phone number. May be empty if the raw
   * input failed to parse, in which case raw_input should be used.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
   */
  private void clearDialerInternalPhoneNumber() {  dialerInternalPhoneNumber_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int RAW_INPUT_FIELD_NUMBER = 2;
  private RawInput rawInput_;
  /**
   * <pre>
   * Prefer to use dialer_internal_phone_number if present.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
   */
  public boolean hasRawInput() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Prefer to use dialer_internal_phone_number if present.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
   */
  public RawInput getRawInput() {
    return rawInput_ == null ? RawInput.getDefaultInstance() : rawInput_;
  }
  /**
   * <pre>
   * Prefer to use dialer_internal_phone_number if present.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
   */
  private void setRawInput(RawInput value) {
    if (value == null) {
      throw new NullPointerException();
    }
    rawInput_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * Prefer to use dialer_internal_phone_number if present.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
   */
  private void setRawInput(
      RawInput.Builder builderForValue) {
    rawInput_ = builderForValue.build();
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Prefer to use dialer_internal_phone_number if present.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
   */
  private void mergeRawInput(RawInput value) {
    if (rawInput_ != null &&
        rawInput_ != RawInput.getDefaultInstance()) {
      rawInput_ =
        RawInput.newBuilder(rawInput_).mergeFrom(value).buildPartial();
    } else {
      rawInput_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Prefer to use dialer_internal_phone_number if present.
   * </pre>
   *
   * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
   */
  private void clearRawInput() {  rawInput_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, getDialerInternalPhoneNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, getRawInput());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getDialerInternalPhoneNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getRawInput());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static DialerPhoneNumber parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static DialerPhoneNumber parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static DialerPhoneNumber parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static DialerPhoneNumber parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static DialerPhoneNumber parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static DialerPhoneNumber parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static DialerPhoneNumber parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static DialerPhoneNumber parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static DialerPhoneNumber parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static DialerPhoneNumber parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(DialerPhoneNumber prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A phone number for use in the dialer application. It consists of a
   * DialerInternalPhoneNumber, which is a copy of libphonenumber's PhoneNumber
   * proto, and the raw input used to create it.
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.DialerPhoneNumber}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        DialerPhoneNumber, Builder> implements
      // @@protoc_insertion_point(builder_implements:com.android.dialer.DialerPhoneNumber)
      com.android.dialer.DialerPhoneNumberOrBuilder {
    // Construct using com.android.dialer.DialerPhoneNumber.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * libphonenumber representation of the phone number. May be empty if the raw
     * input failed to parse, in which case raw_input should be used.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
     */
    public boolean hasDialerInternalPhoneNumber() {
      return instance.hasDialerInternalPhoneNumber();
    }
    /**
     * <pre>
     * libphonenumber representation of the phone number. May be empty if the raw
     * input failed to parse, in which case raw_input should be used.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
     */
    public com.android.dialer.DialerInternalPhoneNumber getDialerInternalPhoneNumber() {
      return instance.getDialerInternalPhoneNumber();
    }
    /**
     * <pre>
     * libphonenumber representation of the phone number. May be empty if the raw
     * input failed to parse, in which case raw_input should be used.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
     */
    public Builder setDialerInternalPhoneNumber(com.android.dialer.DialerInternalPhoneNumber value) {
      copyOnWrite();
      instance.setDialerInternalPhoneNumber(value);
      return this;
      }
    /**
     * <pre>
     * libphonenumber representation of the phone number. May be empty if the raw
     * input failed to parse, in which case raw_input should be used.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
     */
    public Builder setDialerInternalPhoneNumber(
        com.android.dialer.DialerInternalPhoneNumber.Builder builderForValue) {
      copyOnWrite();
      instance.setDialerInternalPhoneNumber(builderForValue);
      return this;
    }
    /**
     * <pre>
     * libphonenumber representation of the phone number. May be empty if the raw
     * input failed to parse, in which case raw_input should be used.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
     */
    public Builder mergeDialerInternalPhoneNumber(com.android.dialer.DialerInternalPhoneNumber value) {
      copyOnWrite();
      instance.mergeDialerInternalPhoneNumber(value);
      return this;
    }
    /**
     * <pre>
     * libphonenumber representation of the phone number. May be empty if the raw
     * input failed to parse, in which case raw_input should be used.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerInternalPhoneNumber dialer_internal_phone_number = 1;</code>
     */
    public Builder clearDialerInternalPhoneNumber() {  copyOnWrite();
      instance.clearDialerInternalPhoneNumber();
      return this;
    }

    /**
     * <pre>
     * Prefer to use dialer_internal_phone_number if present.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
     */
    public boolean hasRawInput() {
      return instance.hasRawInput();
    }
    /**
     * <pre>
     * Prefer to use dialer_internal_phone_number if present.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
     */
    public RawInput getRawInput() {
      return instance.getRawInput();
    }
    /**
     * <pre>
     * Prefer to use dialer_internal_phone_number if present.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
     */
    public Builder setRawInput(RawInput value) {
      copyOnWrite();
      instance.setRawInput(value);
      return this;
      }
    /**
     * <pre>
     * Prefer to use dialer_internal_phone_number if present.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
     */
    public Builder setRawInput(
        RawInput.Builder builderForValue) {
      copyOnWrite();
      instance.setRawInput(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Prefer to use dialer_internal_phone_number if present.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
     */
    public Builder mergeRawInput(RawInput value) {
      copyOnWrite();
      instance.mergeRawInput(value);
      return this;
    }
    /**
     * <pre>
     * Prefer to use dialer_internal_phone_number if present.
     * </pre>
     *
     * <code>optional .com.android.dialer.DialerPhoneNumber.RawInput raw_input = 2;</code>
     */
    public Builder clearRawInput() {  copyOnWrite();
      instance.clearRawInput();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:com.android.dialer.DialerPhoneNumber)
  }
  private byte memoizedIsInitialized = -1;
  protected final Object dynamicMethod(
      MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new DialerPhoneNumber();
      }
      case IS_INITIALIZED: {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return DEFAULT_INSTANCE;
        if (isInitialized == 0) return null;

        boolean shouldMemoize = ((Boolean) arg0).booleanValue();
        if (hasDialerInternalPhoneNumber()) {
          if (!getDialerInternalPhoneNumber().isInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
        }
        if (shouldMemoize) memoizedIsInitialized = 1;
        return DEFAULT_INSTANCE;

      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        DialerPhoneNumber other = (DialerPhoneNumber) arg1;
        dialerInternalPhoneNumber_ = visitor.visitMessage(dialerInternalPhoneNumber_, other.dialerInternalPhoneNumber_);
        rawInput_ = visitor.visitMessage(rawInput_, other.rawInput_);
        if (visitor == MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.android.dialer.DialerInternalPhoneNumber.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = dialerInternalPhoneNumber_.toBuilder();
                }
                dialerInternalPhoneNumber_ = input.readMessage(com.android.dialer.DialerInternalPhoneNumber.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dialerInternalPhoneNumber_);
                  dialerInternalPhoneNumber_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                RawInput.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = rawInput_.toBuilder();
                }
                rawInput_ = input.readMessage(RawInput.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(rawInput_);
                  rawInput_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (DialerPhoneNumber.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:com.android.dialer.DialerPhoneNumber)
  private static final DialerPhoneNumber DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new DialerPhoneNumber();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static DialerPhoneNumber getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DialerPhoneNumber> PARSER;

  public static com.google.protobuf.Parser<DialerPhoneNumber> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

